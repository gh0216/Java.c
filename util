package org.example.util;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;
import org.example.exception.AppException;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DBUtil {

    private static final DataSource DS = new MysqlDataSource();

    //多线程学习以后，会优化为双重校验锁的单例模式来使用DataSource
    static{
        ((MysqlDataSource) DS).setUrl("jdbc:mysql://localhost:3306/chong_blog?user=root&password=ghz0216&useUnicode=true&useSSL=false&characterEncoding=UTF-8");
    }

    public static Connection getConnection(){
        try {
            return DS.getConnection();
        } catch (SQLException e) {
            throw new AppException("DB001", "获取数据库连接失败", e);
        }
    }

    public static void close(Connection c, Statement s){
        close(c, s, null);
    }

    public static void close(Connection c, Statement s, ResultSet r){
        try {
            if(r != null)
                r.close();
            if(s != null)
                s.close();
            if(c != null)
                c.close();
        } catch (SQLException e) {
            throw new AppException("DB002", "释放数据库资源失败", e);
        }
    }
}


package org.example.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;

public class JSONUtil {

    //jackson框架中，对json字符串和java对象之间互相转换的类
    private static final ObjectMapper MAPPER = new ObjectMapper();

    /**
     * 序列化操作：java对象序列化为json字符串
     * @param o java对象
     * @return json字符串
     */
    public static String serialize(Object o){
        try {
            return MAPPER.writeValueAsString(o);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            throw new RuntimeException("java对象序列化为JSON字符串出错:"+o, e);
        }
    }

    /**
     * 反序列化输入流/字符串为java对象
     * @param is 输入流
     * @param clazz 指定要反序列化的java类型
     * @param <T>
     * @return 反序列后的java对象
     */
    public static <T> T deserialize(InputStream is, Class<T> clazz){
        try {
            return MAPPER.readValue(is, clazz);
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("反序列化失败");
        }
    }
}
