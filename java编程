import com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;

public class TestDemo {
    
    
    //青蛙跳台阶
    public static int jump (int n) {
            if ( n == 1) {
                return 1;
            }
            if ( n == 2) {
                return 2;
            }
            int tmp = jump(n-1) + jump(n-2);
            return tmp;
    }

    public static void main(String[] args) {
        System.out.println(jump(10));
    }
    
    //各位数只和
    public static int sumAdd (int n) {
        if (n <= 9) {
            System.out.println(n);
            return n;
        }
        return sumAdd(n/10)+n%10;
    }

    public static void main16(String[] args) {
        System.out.println(sumadd(1234));
    }

    //菲波那切数列
    public static int fiBor(int n) {
        if ( n == 1 && n == 2){
            return n;
        }
        int ret = fibOr(n-1) +fibOr(n-2);
        return ret;
    }

    public static void main15(String[] args) {
        System.out.println(fibOr(1));
        System.out.println(fibOr(2));
        System.out.println(fibOr(5));
        System.out.println(fibOr(40));
    }

    //递归求解汉诺塔问题
    /**
     * 1： A->C   1
     * 2: A->B  A->C  B->C   3
     * 3: A->C  A->B C->B  A->C  B->A  B->C  A->C  7
     * 64   2^64   -1
     * @param args
     */
    public  static void hanoiPower (int n,char pos1,char pos2,char pos3) {
        if (n == 1){
            move(pos1,pos3);
            return ;
        }
        hanoiPower(n-1,pos1,pos3,pos2);
        move(pos1,pos3);
        hanoiPower(n-1,pos2,pos1,pos3);
    }

    public static void move(char pos1,char pos2) {
        System.out.print(pos1+"->"+pos2+" ");
    }
    public static void main14(String[] args) {
        hanoiPower(1,'A','B','C');
        System.out.println();
        hanoiPower(2,'A','B','C');
        System.out.println();
        hanoiPower(3,'A','B','C');
    }

    //在同一个类中,分别定义求两个整数的方法 和 三个小数之和的方法。 并执行代码，求出结果
    public static int sumTwoNumber (int a, int b) {
        return a + b;
    }
    public static double sumTwoNumber (double a, double b) {
        return a + b;
    }
    public static double sumTwoNumber (double a, double b ,double c) {
        return a + b + c;
    }
    public static void main13(String[] args) {
        System.out.println(sumTwoNumber(10, 20));
        System.out.println(sumTwoNumber(10.5, 20.8, 50.6));
    }


    //在同一个类中定义多个方法：要求不仅可以求两个整数的最大值，还可以求两个小数的最大值，以及两个小数和一个整数的大小关系
    public static int addN (int a, int b) {
        int c = Math.max(a, b);
        return c;
    }
    public static double addN (double a, double b) {
        double c = Math.max(a, b);
        return c;
    }
    public static double addN (double a, double b ,double c) {
        double d = Math.max(a, b);
        double e = Math.max(c, d);
        return e;
    }

    public static void main12(String[] args) {
        System.out.println(addN(10, 20));
        System.out.println(addN(10.5, 20.8));
        System.out.println(addN(15, 10.8,6.9));
    }
//    public static int addN (int a, int b) {


    //调整数组顺序使得奇数位于偶数之前,调整之后，不关心大小顺序。
     public static void main11(String[] args) {
         int[] err = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
         for (int i = 0; i < 10; i++) {
             for (int j = i + 1; j < 10; j++) {
                 if (err[j] % 2 != 0) {
                     int tmp = err[j];
                     err[j] = err[i];
                     err[i] = tmp;
                 }
             }
             System.out.print(err[i] + " ");
         }
     }




    //递归求阶乘
    public static  int fac (int n) {
        if (n == 1) {
            return 1;
        }
        int tmp = n * fac (n-1);
        return tmp;
    }

    public static void main10(String[] args) {
        System.out.println(fac(5));
        System.out.println(fac(10));
    }

    //打印出1234的  1  2   3   4
    public static int printNum(int n) {
        if ( n <= 9 ) {
            System.out.println(n);
            return n;
        }
        printNum(n/10);
        System.out.println(n % 10);
        return n;
    }

    public static void main9(String[] args) {
        System.out.println(printNum(1234));
    }

    //求n项和
    public static int sum (int n) {
        if (n == 1 ){
            return 1;
        }
        int ret = n + sum( n-1);
        return ret;
    }

    public static void main8(String[] args) {
        System.out.println(sum(100));
    }



    //斐波那切数列
    //递归法
    public static int fibOr (int n) {
        int count = 0;
        if ( n == 1) {
            count++;
            return 1 ;
        }
        if ( n == 2) {
            return 1;
        }
        int ret = fibOr(n-1) + fibOr(n-2);
        return ret;
    }

    public static void main7(String[] args) {
        System.out.println(fibOr(1));
        System.out.println(fibOr(2));
        System.out.println(fibOr(6));
        System.out.println(fibOr(8));
        System.out.println(fibOr(40));
    }
    //斐波那切数列
    //for循环
    public static int fib (int n) {
        int f1 = 1;
        int f2 = 1;
        int f3 = 1;
        for (int i = 3; i <= n  ; i++) {
            f3 = f1 + f2;
            //确定f1 f2的新值
            f1 = f2;
            f2 = f3;
        }
        return f3 ;
    }

    public static void main6(String[] args) {
        System.out.println(fib(1));
        System.out.println(fib(3));
        System.out.println(fib(6));
        System.out.println(fib(40));
    }



    //有一组数据，只有一个数字是出现一次，其他是两次，请找出这个数字
    public static int findOnceNumber (int[] arr) {
        int a = 0;
        for (int i = 0; i <= 4 ; i++) {
            a = a ^ arr[i];
        }
        return a;
    }

    public static void main5 (String[] args) {
        int[] arr = {1,2,5,2,1};
        int ret = findOnceNumber(arr);
        System.out.println(ret);
    }




    public static  int sumadd (int n ) {
        if (n < 10){
            return n;
        }
        return sumadd(n/10)+n%10;
    }

    public static void main4(String[] args) {

        System.out.println(sumadd(1234));
    }


    //diguijia
    public  static int sumt (int n) {
        if (n == 1) {
            return 1;
        }
        n = n+ sum(n-1);
        return n;
    }

    public static void main3(String[] args) {
        System.out.println(sum(10));
    }


    //diduixianshi 1 2 3 4
    public static int weishu (int n) {
        if (n < 10) {
            System.out.println(n);
        }
        weishu(n/10);
        System.out.println(n%10);
        return n;
    }

    public static void main2(String[] args) {
        
        System.out.println(weishu(1234));
    }


    public static int add (int a , int b) {
        return a + b;
    }

    public static double add (double a, double b) {
        return  a + b;
    }

    public static int add (int a, int b, int c) {
        return a + b + c ;
    }

    public static void main1(String[] args) {
        int a = 20;
        int b = 10;
        System.out.println(add(a, b));
        double c = 15.2;
        double d = 13.5;
        System.out.println(add(c, d));
    }
}
