import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

class Solution2 {
    public int longestPalindrome(String s) {
        int end = 0,start = 0,len = 0;
        Set<Character> set = new HashSet<>();
        char[] arr = s.toCharArray();
        for (Character c : arr) {
            if (!set.contains(c)) {
                end++;
            } else {
                set.clear();
                len = Math.max(len, (end - start+1));
                start = end;
            }
            set.add(c);
        }
        return len;
    }
}
class Exchange {
    //位运算符
    public int[] exchangeAB(int[] AB) {
        // write code here
        AB[0] ^= AB[1];
        AB[1] ^= AB[0];
        AB[0] ^= AB[1];
        return AB;
    }
}

class Solution1 {
    public int[] multiply(int[] A) {

        if(A==null && A.length==0){
            return A;
        }
        int[] B=new int[A.length];
        for(int i = 0;i < A.length ; i++){
            int sum=1;
            for(int j = 0;j < A.length;j++){
                if(i != j ){
                    sum*=A[j];
                }
            }
            B[i]=sum;
        }
        return B;
    }

}

class Solution {
    public int[] multiply(int[] A) {
        int sum = A[0],tmp = A[0];
        int[] B =new int[A.length];
        for (int i = 1; i < A.length; i++) {
            if (A[i] != 0){
                sum *= A[i];
            }
            tmp *= A[i];
        }
        for (int i = 0; i < A.length ; i++) {
            if (A[i] == 0){
                B[i] = sum ;
            }else {
                B[i] = tmp / A[i];
            }
        }
        return B;
    }
}

//格雷码
class GrayCode1 {
    public String[] getGray(int n) {
        // write code here
        String[] strings = new String[(int)Math.pow(2,n)];
        if(n==1){
            strings[0]="0";
            strings[1]="1";
            return strings;
        }

        String[] resulStrings = getGray(n-1);
        for(int i = 0;i < resulStrings.length;i++){
            strings[i] = "0" + resulStrings[i];
            strings[strings.length-i-1] = "1" + resulStrings[i];
        }
        return strings;
    }
}

class GrayCode {
    public String[] getGray(int n) {
        String[] resStrs = null;
        if (n == 1) {
            resStrs = new String[] {"0","1"};
        } else {
            String[] str = getGray(n-1);
            resStrs = new String[2*str.length];
            for (int i = 0; i < str.length; i++) {
                resStrs[i] = "0"+str[i];
                resStrs[resStrs.length-1-i] = "1"+str[i];
            }
        }
        return resStrs;
    }
}
public class Main{
    public static void charStyle(int n,char b){
        for (int i = 1; i < n; i++) {
            if (i == 1 || i == n-1){
                for (int j = 0; j < n; j++) {
                    System.out.print(b);
                }
            }else if (i % 2 == 0){
                System.out.println();
            }else {
                System.out.println(b+" "+b);
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        int n = sc.nextInt();
        String b = sc.nextLine();
        char x = b.charAt(1);
        charStyle(n,x);
    }

    static boolean out(char c){
        System.out.print(c);
        return true;
    }

    public static void main1(String[] args) {
        int i = 0;
        for (out('A');out('B') && (i < 2) ;out('C')){
            i++;
            out('D');
        }
    }
}

/*class Main1 {

    public static String[] getGray(int n) {
        // write code here
        String[] strings=new String[(int)Math.pow(2,n)];
        if(n==1){
            strings[0]="0";
            strings[1]="1";
            return strings;
        }
        String[] resulStrings = getGray(n-1);
        for(int i = 0;i < resulStrings.length;i++){
            strings[i]="0"+resulStrings[i];
            strings[strings.length-i-1]="1"+resulStrings[i];
        }
        return strings;

    }

    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        int n=scanner.nextInt();
        System.out.println(Arrays.toString(getGray(n)));
//        String[] strings=new String[(int)Math.pow(2,n)];
//        System.out.println(Arrays.toString(strings));
//        System.out.println(Math.pow(2, 4));
//        String[] result = new GrayCode().grayMard(n);
//        for(int i=0;i<result.length;i++){
//            System.out.println(result[i]);
//        }
//        String []result=new NtoGram().grayMard(n);
//        for(int i=0;i<result.length;i++){
//            System.out.println(result[i]);
//        }

    }


    public static void main6(String[] args) {
        Solution2 solution2 =new Solution2();
        String str = "asdfghjklkjhgfdfghjktrtyuiopoikjnavohibjlnjohiblj";
        String str1 = "ababd";
        System.out.println(solution2.longestPalindrome(str1));
        System.out.println(solution2.longestPalindrome(str));
    }

    public static void main5(String[] args) {
        Exchange exchange =new Exchange();
        int[] arr = {1,2};
        System.out.println(Arrays.toString(exchange.exchangeAB(arr)));
    }

    public static void main4(String[] args) {
        Solution solution = new Solution();
        Solution1 solution1 = new Solution1();
        int[] arr = {3,2,9,45,5,1,1,8,2,6};
        System.out.println(Arrays.toString(solution1.multiply(arr)));
        System.out.println(Arrays.toString(solution.multiply(arr)));
    }

    public static void main3(String[] args){
        Scanner sc = new Scanner(System.in);
        String N = sc.next();
        char[] chars = N.toCharArray();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            list.add(0);
        }
        for (int i = 0; i < chars.length; i++) {
            list.set(chars[i]-'0',list.get(chars[i]-'0')+1);
        }
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i)>0){
                System.out.println(i+":"+list.get(i));
            }
        }
    }


    public static void main2(String[] args) {
        Scanner sc = new Scanner(System.in);
        Map<Character,Integer> map = new HashMap<>();
        while (sc.hasNextInt()){
            String str = sc.nextLine();
            for (Character val:str.toCharArray()) {
                map.put(val,map.getOrDefault(val,0)+1);
            }
            for(Map.Entry<Character, Integer> entry : map.entrySet()){
                System.out.println(entry.getKey() + ":" + entry.getValue());
            }
        }
    }

    public static void main1(String[] args) {
        Scanner sc = new Scanner(System.in);
        Map<Integer,Integer> map = new HashMap<>();
        int num = sc.nextInt();
        while (num > 0){
            map.put(num%10,map.getOrDefault(num%10,0)+1);
            num = num /10;
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            System.out.println(entry.getKey() + ":" + entry.getValue());
        }
    }
}*/
