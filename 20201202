import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class A{

}
class B extends A{

}
class C extends B{

}

class Demo3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            int n = scanner.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < arr.length; i++) {
                arr[i] = i;
            }
            System.out.println(delete(arr));
        }
        scanner.close();
    }

    public static int delete (int[] arr) {
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < arr.length; i++) {
            queue.add(arr[i]);
        }
        while (queue.size() != 1) {
            int count = 0;
            while (count != 2) {
                queue.add(queue.peek());
                queue.poll();
                count++;
            }
            queue.poll();
        }
        return queue.element();
    }
}


public class Main {

    //求一组数据的最小的K个
    public static void findKSmall(int[] arr){
        int k = arr[arr.length-1];
        if (k < 0){
            k = k * (-1);
        }
        int[] val = new int[arr.length-1];
        for (int i = 0; i < val.length ; i++) {
            val[i] = arr[i];
        }
        if (k > val.length){
            System.out.println(0);
        }
        for (int i = 1; i < val.length; i++) {
            int tmp = val[i];
            int j = i-1;
            for (; j >= 0 ; j--) {
                if(val[j] > tmp) {
                    val[j+1] = val[j];
                }else {
                    //array[j+1] = tmp;
                    break;
                }
            }
            val[j+1] = tmp;
        }
        int[] tmp = new int[k];
        for (int i = 0; i < k ; i++) {
            tmp[i] = val[i];
        }
        for (int s:tmp) {
            System.out.print(s+" ");
        }
    }

    public static void main4(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNextInt()){
            String s = sc.nextLine();
            String [] str=s.split(" ");
            int [] arr= new int[str.length];
            for(int i=0;i<str.length;i++){
                arr[i]=Integer.parseInt(str[i]);
            }
            findKSmall(arr);
        }
    }

    public static void findLastDel(int N){
        int[] array = new int[N];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < N ; i++) {
            array[i] = i;
        }
        for (Integer val:array) {
            q.add(val);
        }if (q.isEmpty()){
            System.out.println(0);
        } else if (q.size() == 2){
            q.poll();
            System.out.println(q.poll());
        }else if (q.size() == 1){
            System.out.println(q.poll());
        }else {
            while (q.size() > 2){
                int a = q.poll();
                int b = q.poll();
                q.poll();
                q.add(a);
                q.add(b);
            }
            q.poll();
            for (int i = 0; i < N ; i++) {
                if (array[i] == q.peek()){
                    System.out.println(i);
                    break;
                }
            }
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNextInt()){
            int N = sc.nextInt();
            findLastDel(N);
        }
    }

//    public static int findLastDel(int N){
//        int[] array = new int[N];
//        for (int i = 0; i < N ; i++) {
//            array[i] = i;
//        }
//        while (N > 1){
//            if (N % 3 == 0){
//                int[] tmp = new int[(N+1)/3] ;
//                int j = 0;
//                for (int i = 0; i < N ; i++) {
//                    if ((i+1) % 3 == 0){
//                        tmp[j] = array[i];
//                        j++;
//                    }
//                }
//                N = N - tmp.length;
//            }else if (N % 3 == 1){
//                int[] tmp1 = new int[ N/3 + 1] ;
//                int j = 0;
//                for (int i = 0; i < N ; i++) {
//                    if ((i+1) % 3 == 0){
//                        tmp1[j] = array[i];
//                        j++;
//                    }
//                }
//                N = N - tmp1.length;
//            }else{
//                int[] tmp2 = new int[ N/3 + 1] ;
//                int j = 0;
//                for (int i = 0; i < N ; i++) {
//                    if ((i+1) % 3 == 0){
//                        tmp1[j] = array[i];
//                        j++;
//                    }
//                }
//                N = N - tmp1.length;
//            }
//        }
//        return N;
//    }

    public static void main2(String[] args) {
        A a0 = new A();
        A a1 = new B();
        A a3 = new C();
    }

//    public static void main1(String[] args) {
//        System.out.println(new B().getValue());
//    }
//    static class A{
//        protected  int value;
//        public A(int v){
//            setValue(v);
//        }
//
//        public A() {
//
//        }
//
//        public void setValue(int value){
//            this.value = value;
//        }
//        public int getValue(){
//            try {
//                value++;
//                return value;
//            }catch (Exception e){
//                System.out.println(e.toString());
//            }finally {
//                this.setValue(value);
//                System.out.println(value);
//            }
//            return value;
//        }
//    }
//    static class B extends A{
//
//        public B() {
//            super(5);
//            setValue(getValue()-3);
//        }
//        public void setValue(int value){
//            super.setValue(2*value);
//        }
//    }
}
