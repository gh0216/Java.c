class ListNode {
      int val;
      ListNode next;
      ListNode()  { }
      public ListNode(int val) { this.val = val; }
      public ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    //遍历两个链表  看其中一个链表是否遍历完
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = null, tail = null;
        int carry = 0;        //进位值
        while (l1 != null || l2 != null) {
            int n1 = l1 != null ? l1.val : 0;
            int n2 = l2 != null ? l2.val : 0;
            int sum = n1 + n2 + carry;
            if (head == null) {
                head = tail = new ListNode(sum % 10);
            } else {
                tail.next = new ListNode(sum % 10);
                tail = tail.next;
                carry = sum / 10;
            }
            l1 = l1.next;
        }
        if (l2 != null) {
            if (l1 != null) {
                l2 = l2.next;
            }
        }
        if (carry > 0) {
            tail.next = new ListNode(carry);
        }
        return head;
    }


    //
    public ListNode addTwoNumbers2(ListNode l1, ListNode l2) {
        ListNode pre = new ListNode(0);  //傀儡节点
        ListNode cur = pre;     // 定义一个pre节点遍历链表
        int carry = 0;    //进位数值
        while(l1 != null || l2 != null) {
            int x = l1 == null ? 0 : l1.val;  //得到l1.val
            int y = l2 == null ? 0 : l2.val;  //得到l2.val
            int sum = x + y + carry;         //二者和

            carry = sum / 10;
            sum = sum % 10;
            cur.next = new ListNode(sum);    // 定义一个节点跟在傀儡节点  值为对应l1.val+l2.val

            cur = cur.next;            //开始遍历
            if(l1 != null)
                l1 = l1.next;
            if(l2 != null)
                l2 = l2.next;
        }
        if(carry == 1) {
            cur.next = new ListNode(carry);  //当l1.val+l2.val大于10  即carry大于1
                                             // 就需要定义一个新的进位节点 跟在sum后边
        }
        return pre.next;   ///返回傀儡节点的下一个节点
    }
}
class Solution3 {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] tmp = new int[nums1.length+nums2.length];
        int i = 0,j = 0,n = 0;
        while (i < nums1.length || j < nums2.length){
            while (i < nums1.length && j < nums2.length){
                if (nums1[i] < nums2[j]){
                    tmp[n] = nums1[i];
                    i++;
                }else {
                    tmp[n] = nums2[j];
                    j++;
                }
                n++;
            }
            if (i < nums1.length){
                tmp[n] = nums1[i];
                i++;
            }
            if (j < nums2.length){
                tmp[n] = nums2[j];
                j++;
            }
            n++;
        }
        return (tmp[0] + tmp [tmp.length-1]) *1.0 /2;
    }
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] tmp = new int[nums1.length+nums2.length];
        int i = 0,j = 0,n = 0;
        while (i < nums1.length || j < nums2.length){
            while (i < nums1.length && j < nums2.length){
                if (nums1[i] < nums2[j]){
                    tmp[n] = nums1[i];
                    i++;
                }else {
                    tmp[n] = nums2[j];
                    j++;
                }
                n++;
            }
            if (i < nums1.length){
                tmp[n] = nums1[i];
                i++;
            }
            if (j < nums2.length){
                tmp[n] = nums2[j];
                j++;
            }
            n++;
        }
        return (tmp[0] + tmp [tmp.length-1]) *1.0 /2;
    }
}
public class TestDemo {

    public static void main(String[] args) {
        int[] nums1 = {1,3}, nums2 = {3,4};
        Solution3 solution3 = new Solution3();
        System.out.println(solution3.findMedianSortedArrays(nums1, nums2));
    }
    public static void main1(String[] args) {
        Solution1 solution1 = new Solution1();
        System.out.println(solution1.lengthOfLongestSubstring1("pwwkew"));
        System.out.println(solution1.lengthOfLongestSubstring("pwwkew"));
    }
}
public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    int[] nums;
    int m = nums1.length;
    int n = nums2.length;
    nums = new int[m + n];
    if (m == 0) {
        if (n % 2 == 0) {
            return (nums2[n / 2 - 1] + nums2[n / 2]) / 2.0;
        } else {

            return nums2[n / 2];
        }
    }
    if (n == 0) {
        if (m % 2 == 0) {
            return (nums1[m / 2 - 1] + nums1[m / 2]) / 2.0;
        } else {
            return nums1[m / 2];
        }
    }

    int count = 0;
    int i = 0, j = 0;
    while (count != (m + n)) {
        if (i == m) {
            while (j != n) {
                nums[count++] = nums2[j++];
            }
            break;
        }
        if (j == n) {
            while (i != m) {
                nums[count++] = nums1[i++];
            }
            break;
        }

        if (nums1[i] < nums2[j]) {
            nums[count++] = nums1[i++];
        } else {
            nums[count++] = nums2[j++];
        }
    }

    if (count % 2 == 0) {
        return (nums[count / 2 - 1] + nums[count / 2]) / 2.0;
    } else {
        return nums[count / 2];
    }
}
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;
        int total = len1 + len2;
        int left = (total + 1) / 2;
        int right = (total + 2) / 2;
        return (findK(nums1, 0, nums2, 0, left) + findK(nums1, 0, nums2, 0, right)) / 2.0;

    }

    //找到两个数组中第k小的元素
    public int findK(int[] nums1, int i, int[] nums2, int j, int k) {
        if (i >= nums1.length)
            return nums2[j + k - 1];
        if (j >= nums2.length)
            return nums1[i + k - 1];
        if (k == 1) {
            return Math.min(nums1[i], nums2[j]);
        }
        //计算出每次要比较的两个数的值，来决定 "删除"" 哪边的元素
        int mid1 = (i + k / 2 - 1) < nums1.length ? nums1[i + k / 2 - 1] : Integer.MAX_VALUE;
        int mid2 = (j + k / 2 - 1) < nums2.length ? nums2[j + k / 2 - 1] : Integer.MAX_VALUE;
        //通过递归的方式，来模拟删除掉前K/2个元素
        if (mid1 < mid2) {
            return findK(nums1, i + k / 2, nums2, j, k - k / 2);
        }
        return findK(nums1, i, nums2, j + k / 2, k - k / 2);
    }
}
