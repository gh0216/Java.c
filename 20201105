class Node {
    public char val;
    public Node left;
    public Node right;

    public Node(char val) {
        this.val = val;
    }
}
public class BinaryTree {

    public Node createTree() {
        Node A = new Node('A');
        Node B = new Node('B');
        Node C = new Node('C');
        Node D = new Node('D');
        Node E = new Node('E');
        Node F = new Node('F');
        Node G = new Node('G');
        Node H = new Node('H');
        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        E.right = H;
        C.left = F;
        C.right = G;
        return A;
    }
    // 前序遍历
    void preOrderTraversal(Node root){
        if(root == null) return;
        System.out.print(root.val+" ");
        preOrderTraversal(root.left);
        preOrderTraversal(root.right);
    }
    // 中序遍历
    void inOrderTraversal(Node root){
        if(root == null) return;
        inOrderTraversal(root.left);
        System.out.print(root.val+" ");
        inOrderTraversal(root.right);
    }
    // 后序遍历
    void postOrderTraversal(Node root){
        if(root == null) return;
        postOrderTraversal(root.left);
        postOrderTraversal(root.right);
        System.out.print(root.val+" ");
    }

    // 遍历思路-求结点个数
    static int size = 0;
    void getSize1(Node root){
        if(root == null)return;
        size++;
        getSize1(root.left);
        getSize1(root.right);
    }

    // 子问题思路-求结点个数
    int getSize2(Node root){
        if(root == null) return 0;
        return getSize2(root.left)+getSize2(root.right)+1;
    }

    // 遍历思路-求叶子结点个数
    static int leafSize = 0;
    void getLeafSize1(Node root){
        if(root == null) return ;
        if(root.left == null && root.right == null) {
            leafSize++;
        }
        getLeafSize1(root.left);
        getLeafSize1(root.right);
    }

    // 子问题思路-求叶子结点个数
    int getLeafSize2(Node root) {
        if(root == null) return 0;
        if(root.left == null && root.right == null) {
            return 1;
        }
        return getLeafSize2(root.left)+getLeafSize2(root.right);
    }

    // 子问题思路-求第 k 层结点个数
    int getKLevelSize(Node root,int k){
        if(root == null) return 0;
        if(k == 1) {
            return 1;
        }
        return getKLevelSize(root.left,k-1)
                +getKLevelSize(root.right,k-1);
    }

}


public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            //1、左括号进行入栈
            char tmp = s.charAt(i);
            if(tmp == '(' || tmp == '[' || tmp == '{') {
                stack.push(tmp);
            }else {
                //2、判断栈是否为空
                if(stack.empty()) {
                    System.out.println("右括号多！");
                    return  false;
                }else{
                    //3、判断栈顶元素的字符左括号和当前的字符 右括号是否匹配
                    char cur = s.charAt(i);//在遍历字符串右括号
                    char topChar = stack.peek();//栈内的
                    if(cur==')' && topChar == '(' ||
                            cur == ']' && topChar=='['
                            || cur=='}' && topChar == '{') {
                        stack.pop();
                    }else {
                        System.out.println("右括号不匹配左括号");
                        return false;
                    }
                }
            }
        }
        //4、判断栈是否为空
        if (!stack.empty()){
            System.out.println("左括号多");
            return false;
        }
        System.out.println("括号匹配!");
        return true;
    }
    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            //1、左括号进行入栈
            char tmp = s.charAt(i);
            if(tmp == '(' || tmp == '[' || tmp == '{') {
                stack.push(tmp);
            }else {
                //2、判断栈是否为空
                if(stack.empty()) {
                    System.out.println("右括号多！");
                    return  false;
                }else{
                    //3、判断栈顶元素的字符左括号和当前的字符 右括号是否匹配
                    char cur = s.charAt(i);//在遍历字符串右括号
                    char topChar = stack.peek();//栈内的
                    if(cur==')' && topChar == '(' ||
                            cur == ']' && topChar=='['
                            || cur=='}' && topChar == '{') {
                        stack.pop();
                    }else {
                        System.out.println("右括号不匹配左括号");
                        return false;
                    }
                }
            }
        }
        //4、判断栈是否为空
        if (!stack.empty()){
            System.out.println("左括号多");
            return false;
        }
        System.out.println("括号匹配!");
        return true;
    }
