import org.omg.CORBA.NO_IMPLEMENT;

import java.net.NetworkInterface;

class Node {
    public int data;
    public Node next;

    public Node(int data) {
        this.data = data;
    }
}

public class MySignleList {
    public Node head;
    //头插法
    public void addFirst(int data) {
        Node node = new Node(data);
        if (this.head == null) {
            this.head = node;
        }else{
            node.next = this.head;
            this.head = node;
        }
    }
    //尾插法
    public void addLast (int data){
        Node node = new Node(data);
        Node cur = this.head;
        if (this.head == null){
            this.head = node;
            return;
        }
        while (cur.next != null){
            cur = cur.next;
        }
        cur.next = node;
    }

    //删除一个单链表作中相同数据的引用
    public Node deleteDuplication() {
        Node cur = this.head;
        Node newHead = new Node(-1);
        Node tmp = newHead;
        while (cur != null) {
            if(cur.next != null && cur.data == cur.next.data) {
                while (cur.next != null && cur.data == cur.next.data) {
                    cur = cur.next;
                }
                cur = cur.next;
            }else {
                tmp.next = cur;
                tmp = tmp.next;
                cur = cur.next;
            }
        }
        tmp.next = null;
        return newHead.next;
    }

    //定义一个x   让小于x的值位于前边  大于x的值位于后边
    public Node partition (int x) {
        Node bs = null;
        Node be = null;
        Node as = null;
        Node ae = null;
        Node cur= this.head;
        while(cur != null) {
            if (cur.data < x){
                if (bs == null){
                    bs = cur;
                    be = cur;
                }else{
                    be.next = cur;
                    be = cur;
                }
            }else {
                if (as == null){
                    as = cur;
                    ae = cur;
                }else{
                    ae.next = cur;
                    ae = cur;
                }
            }
            cur = cur.next;
        }
//        if (bs == null){
//            return as;
//        }
//        be.next = as;
//        if (as != null){
//            ae.next= null;
//        }
//        return bs;
        if (bs == null || as == null){
            return  this.head;
        }else{
            be.next = as;
            ae.next =null;
        }
        return bs;
    }

    //7   判断回文结构
    public boolean chkPalindrome() {
        if (this.head == null){
            return false;
        }if (this.head.next == null){
            return true;
        }
        //回文结构
        //1、找到中间位置
        Node fast = this.head;
        Node slow = this.head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        //slow就是中间位置。开始进行第2步
        //2、进行反转
        Node pre = slow;  //定义一个引用等于中间位置的引用
        Node cur = slow.next;
        while (cur != null ) {
            Node curNext = cur.next;
            cur.next = slow ;
            slow = cur ;
            cur = curNext;
        }
        //3、开始判断
        while (this.head != pre){  //判断this.head是否到达中间引用
            if (this.head.data == slow.data){
                this.head = this.head.next;
                slow = slow.next;
                return true;
            }
        }
//        while (this.head != slow) {
//            if(this.head.data != slow.data) {
//                return false;
//            }
//            if(this.head.next == slow) {
//                //偶数情况下
//                return true;
//            }
//            this.head = this.head.next;
//            slow = slow.next;
//        }
        return false;
    }

    //判断是否为环形链表
    public boolean hasCycle() {
        Node fast = this.head;
        Node slow = this.head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow) {
                break;
            }
        }
        if(fast == null || fast.next == null) {
            return false;
        }
        return true;
    }


    //找环的入口
    public Node detectCycle() {
        Node fast = this.head;
        Node slow = this.head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow) {
                break;
            }
        }
        if(fast == null || fast.next == null) {
            return null;
        }
        slow = this.head;
        while (slow != fast) {
            fast = fast.next;
            slow = slow.next;
        }
        return slow;
    }
    
    //
}
