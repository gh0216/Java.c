class Solution {
    int i;
    public String countOfAtoms(String formula) {
        StringBuilder ans = new StringBuilder();
        i = 0;
        Map<String, Integer> count = parse(formula);
        for (String name: count.keySet()) {
            ans.append(name);
            int multiplicity = count.get(name);
            if (multiplicity > 1) ans.append("" + multiplicity);
        }
        return new String(ans);
    }

    public Map<String, Integer> parse(String formula) {
        int N = formula.length();
        Map<String, Integer> count = new TreeMap();
        while (i < N && formula.charAt(i) != ')') {
            if (formula.charAt(i) == '(') {
                i++;
                for (Map.Entry<String, Integer> entry: parse(formula).entrySet()) {
                    count.put(entry.getKey(), count.getOrDefault(entry.getKey(), 0) + entry.getValue());
                }
            } else {
                int iStart = i++;
                while (i < N && Character.isLowerCase(formula.charAt(i))) i++;
                String name = formula.substring(iStart, i);
                iStart = i;
                while (i < N && Character.isDigit(formula.charAt(i))) i++;
                int multiplicity = iStart < i ? Integer.parseInt(formula.substring(iStart, i)) : 1;
                count.put(name, count.getOrDefault(name, 0) + multiplicity);
            }
        }
        int iStart = ++i;
        while (i < N && Character.isDigit(formula.charAt(i))) i++;
        if (iStart < i) {
            int multiplicity = Integer.parseInt(formula.substring(iStart, i));
            for (String key: count.keySet()) {
                count.put(key, count.get(key) * multiplicity);
            }
        }
        return count;
    }
}
class Solution {
    public String countOfAtoms(String formula) {
        int N = formula.length();
        Stack<Map<String, Integer>> stack = new Stack();
        stack.push(new TreeMap());

        for (int i = 0; i < N;) {
            if (formula.charAt(i) == '(') {
                stack.push(new TreeMap());
                i++;
            } else if (formula.charAt(i) == ')') {
                Map<String, Integer> top = stack.pop();
                int iStart = ++i, multiplicity = 1;
                while (i < N && Character.isDigit(formula.charAt(i))) i++;
                if (i > iStart) multiplicity = Integer.parseInt(formula.substring(iStart, i));
                for (String c: top.keySet()) {
                    int v = top.get(c);
                    stack.peek().put(c, stack.peek().getOrDefault(c, 0) + v * multiplicity);
                }
            } else {
                int iStart = i++;
                while (i < N && Character.isLowerCase(formula.charAt(i))) i++;
                String name = formula.substring(iStart, i);
                iStart = i;
                while (i < N && Character.isDigit(formula.charAt(i))) i++;
                int multiplicity = i > iStart ? Integer.parseInt(formula.substring(iStart, i)) : 1;
                stack.peek().put(name, stack.peek().getOrDefault(name, 0) + multiplicity);
            }
        }

        StringBuilder ans = new StringBuilder();
        for (String name: stack.peek().keySet()) {
            ans.append(name);
            int multiplicity = stack.peek().get(name);
            if (multiplicity > 1) ans.append("" + multiplicity);
        }
        return new String(ans);
    }
}
mport java.util.regex.*;

class Solution {
    public String countOfAtoms(String formula) {
        Matcher matcher = Pattern.compile("([A-Z][a-z]*)(\\d*)|(\\()|(\\))(\\d*)").matcher(formula);
        Stack<Map<String, Integer>> stack = new Stack();
        stack.push(new TreeMap());

        while (matcher.find()) {
            String match = matcher.group();
            if (match.equals("(")) {
                stack.push(new TreeMap());
            } else if (match.startsWith(")")) {
                Map<String, Integer> top = stack.pop();
                int multiplicity = match.length() > 1 ? Integer.parseInt(match.substring(1, match.length())) : 1;
                for (String name: top.keySet()) {
                    stack.peek().put(name, stack.peek().getOrDefault(name, 0) + top.get(name) * multiplicity);
                }
            } else {
                int i = 1;
                while (i < match.length() && Character.isLowerCase(match.charAt(i))) {
                    i++;
                }
                String name = match.substring(0, i);
                int multiplicity = i < match.length() ? Integer.parseInt(match.substring(i, match.length())) : 1;
                stack.peek().put(name, stack.peek().getOrDefault(name, 0) + multiplicity);
            }
        }

        StringBuilder ans = new StringBuilder();
        for (String name: stack.peek().keySet()) {
            ans.append(name);
            final int count = stack.peek().get(name);
            if (count > 1) ans.append(String.valueOf(count));
        }
        return ans.toString();
    }
}
public String fractionToDecimal(int numerator, int denominator) {
    if (numerator == 0) {
        return "0";
    }
    StringBuilder fraction = new StringBuilder();
    // If either one is negative (not both)
    if (numerator < 0 ^ denominator < 0) {
        fraction.append("-");
    }
    // Convert to Long or else abs(-2147483648) overflows
    long dividend = Math.abs(Long.valueOf(numerator));
    long divisor = Math.abs(Long.valueOf(denominator));
    fraction.append(String.valueOf(dividend / divisor));
    long remainder = dividend % divisor;
    if (remainder == 0) {
        return fraction.toString();
    }
    fraction.append(".");
    Map<Long, Integer> map = new HashMap<>();
    while (remainder != 0) {
        if (map.containsKey(remainder)) {
            fraction.insert(map.get(remainder), "(");
            fraction.append(")");
            break;
        }
        map.put(remainder, fraction.length());
        remainder *= 10;
        fraction.append(String.valueOf(remainder / divisor));
        remainder %= divisor;
    }
    return fraction.toString();
}
public static String fractionToDecimal1(int numerator, int denominator) {
	    if (numerator == 0) {
	        return "0";
	    }
	    StringBuilder fraction = new StringBuilder();
	    // If either one is negative (not both)
	    if (numerator < 0 ^ denominator < 0) {
	        fraction.append("-");
	    }
	    // Convert to Long or else abs(-2147483648) overflows
	    long dividend = Math.abs(Long.valueOf(numerator));
	    long divisor = Math.abs(Long.valueOf(denominator));
	    fraction.append(String.valueOf(dividend / divisor));
	    long remainder = dividend % divisor;
	    if (remainder == 0) {
	        return fraction.toString();
	    }
	    fraction.append(".(");
	    List<Long> list = new ArrayList<Long>();
	    while (remainder != 0) {
	        if (list.contains(remainder)) {
	            fraction.append(")");
	            break;
	        }
	        list.add(remainder);
	        remainder *= 10;
	        fraction.append(String.valueOf(remainder / divisor));
	        remainder %= divisor;
	    }
	    return fraction.toString();
	}
  class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        // 0 除以任何数都是 0 
        if(numerator == 0){
            return "0";
        }
        // 转成 long, 绕开整形溢出陷阱
        long num = numerator, dec = denominator;
        boolean negitive = false;
        // 判断符号, 同正同负才是正, 否则是负
        if(numerator >= 0 ^ denominator >= 0){
            negitive = true;
        }
        // 转为正数运算
        num = Math.abs(num);
        dec = Math.abs(dec);
        // 计算整数部分
        long integer = num / dec;
        // 计算当前余数
        num = num % dec;
        int idx = -1, curPos = 0;
        Map<Long, Integer> map = new HashMap<>();
        StringBuilder builder = new StringBuilder();
        while(num != 0){
            // 余数 * 10 即为当前被除数
            num *= 10;
            // 如果当前被除数之前已经出现过了, 那么代表循环开始
            if(map.containsKey(num)){
                // 获得循环节的位置
                idx = map.get(num);
                break;
            }
            // 更新 map 
            map.put(num, curPos);
            // 记录当前结果
            builder.append(num / dec);
            // 计算当前余数
            num %= dec;
            // 更新小数指针位置
            curPos++;
        }
        StringBuilder ans = new StringBuilder();
        String decmical = builder.toString();
        // 负数
        if(negitive){
            ans.append("-");
        }
        // 加入整数部分
        ans.append(Long.toString(integer));
        // 如果 map 中没有元素, 代表没有小数部分
        if(map.size() != 0){
            ans.append(".");
        }
        // 存在循环节就加入括号, 否则直接加入小数部分
        if(idx != -1){
            ans.append(decmical.substring(0, idx));
            ans.append("(");
            ans.append(decmical.substring(idx));
            ans.append(")");
        }
        else{
            ans.append(decmical);
        }
        return ans.toString();
    }
}
class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        bool isNegative = false;
        assert(denominator != 0);

        if (numerator > 0 && denominator < 0 || numerator < 0 && denominator > 0) {
            isNegative = true;
        }

        long numerat = labs(numerator);
        long denom = labs(denominator);
        long integer = numerat / denom;
        long remainder = numerat % denom;
        string res = to_string(integer);
        res = (isNegative ? "-" : "") + res;
        if (remainder == 0) {
            return res;
        }

        res += ".";
        unordered_map<int, int> rem2Idx;
        while (remainder != 0 && !rem2Idx.count(remainder)) {
            // Save remainder first, so the first remainder wouldn't be overwritten
            rem2Idx[remainder] = res.size();
            remainder *= 10;
            int digit = remainder / denom;
            remainder = remainder % denom;
            res.push_back(digit + '0');

        }

        if (remainder == 0) {
            return res;
        }

        int idx = rem2Idx[remainder];
        // insert number , string
        // insert iterator, char
        res.insert(idx, "(");
        res.push_back(')');

        return res;
    }
}
public String fractionToDecimal(int numerator, int denominator) {
    long num = numerator;
    long den = denominator;
    String sign = "";
    //确定符号
    if (num > 0 && den < 0 || num < 0 && den > 0) {
        sign = "-";
    }
    //转为正数
    num = Math.abs(num);
    den = Math.abs(den);
    //记录整数部分
    long integer = num / den;
    //计算余数
    num = num - integer * den;
    HashMap<Long, Integer> map = new HashMap<>();
    int index = 0;
    String decimal = "";//记录小数部分
    int repeatIndex = -1;//保存重复的位置
    while (num != 0) {
        num *= 10;//余数乘以 10 作为新的被除数
        if (map.containsKey(num)) {
            repeatIndex = map.get(num);
            break;
        }
        //保存被除数
        map.put(num, index);
        //保存当前的商
        long decimalPlace = num / den;
        //加到所有的商中
        decimal = decimal + decimalPlace;
        //计算新的余数
        num = num - decimalPlace * den;
        index++;
    }
    //是否存在循环小数
    if (repeatIndex != -1) {
        String dec = decimal;
        return sign + integer + "." + dec.substring(0, repeatIndex) + "(" + dec.substring(repeatIndex) + ")";
    } else {
        if (decimal == "") {
            return sign + integer;
        } else {
            return sign + integer + "." + decimal;
        }
    }
}
