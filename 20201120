import java.math.BigDecimal;
import java.sql.*;

public class Main {
    public static void main(String[] args) throws ClassNotFoundException, SQLException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            // 加载JDBC驱动程序：反射，这样调用初始化com.mysql.jdbc.Driver类，即将该类加载到JVM方法区，并执行该类的静态方法块、静态属性。
            Class.forName("com.mysql.jdbc.Driver");
            // 第一步： 创建数据库连接
            connection = DriverManager.getConnection
                    ("jdbc:mysql://localhost:3306/chong?user=root&password=ghz0216&useUnicode=true&useSSL=false&characterEncoding=UTF-8");
            System.out.println(connection);

            //第二步：创建操作命令对象
            statement = connection.createStatement();

            //第三步：执行sql
            resultSet = statement.executeQuery("select book_name,book_author,price,type from book");

            //第四步：处理结果集 ResultSet（类似List<Map<String,字段属性>>）
            while(resultSet.next()){  //遍历每一行数据
                String book_name = resultSet.getString("book_name");
                String book_author = resultSet.getString("book_author");
                BigDecimal price = resultSet.getBigDecimal("price");
                String type = resultSet.getString("type");
                System.out.printf("book_name=%s,book_author=%s,price=%s,type=%s", book_name,book_author,price,type);
            }
        } catch (Exception e) {
            e.printStackTrace();
//        } catch (SQLException throwables) {
//            throwables.printStackTrace();
        } finally {
            //第五步：释放资源
            try {
                if (resultSet != null)
                    resultSet.close();
                if (statement != null)
                    statement.close();
                if (connection != null)
                    connection.close();
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }
    }
}
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>202011201</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>

    <maven.compiler.source>1.8</maven.compiler.source>

    <maven.compiler.target>1.8</maven.compiler.target>

    </properties>

    <!-- 依赖包 -->
    <dependencies>
        <dependency>
            <!--组织名，一般是使用公司的域名-->
            <groupId>mysql</groupId>
            <!-- 产品名 -->
            <artifactId>mysql-connector-java</artifactId>
            <!-- 版本号 -->
            <version>5.1.49</version>
        </dependency>
    </dependencies>


</project>

package hashback;

class ListNode {
     int val;
     ListNode next;
     ListNode(int x) {
         this.val = x;
     }
 }

class Solution {
    public ListNode insertionSortList(ListNode head) {
        ListNode cur = head;
        ListNode tmp = head;
        ListNode pre = null;
        while(cur.next != null){
            if (tmp == cur){
                cur = cur.next;
            }else {
                while (tmp != cur){
                    pre = tmp.next;
                    if (tmp.val > pre.val){
                        tmp.next = pre.next;
                        pre.next = tmp;
                    }
                    tmp = tmp.next;
                }
            }
        }
        return head;
    }
}

class Solution1 {

    //最后怎么找到头结点？？ 先找一个傀儡节点   让单链表接在傀儡节点之后
    public ListNode insertionSortList(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode dummyHead = new ListNode(0);  ////傀儡节点
        dummyHead.next = head;
        ListNode lastSorted = head, cur = head.next;
        while (cur != null) {
            //判断两个节点的值
            //前变值小于后边值 不进行交换
            if (lastSorted.val <= cur.val) {
                lastSorted = lastSorted.next;
            //前边值大于后边值  进行交换
            } else {
                ListNode prev = dummyHead;

                //该while是遍历lastSorted前边的节点的值  当前边有小于cur且小于lastSorted且在lastSorted前边有大与cur的值的节点时
                //相当于选择插入  找cur应该插入的位置
                while (prev.next.val <= cur.val) {
                    prev = prev.next;
                }

                //选择插入操作步骤
                lastSorted.next = cur.next;
                cur.next = prev.next;
                prev.next = cur;
            }
            //循环继续条件
            cur = lastSorted.next;
        }
        //返回傀儡节点的下一个节点
        return dummyHead.next;
    }
}

public class Test1 {
    public static void main(String[] args) {
        Solution1 solution1 = new Solution1();

    }
}
//两数相加求和

//不全面  没有判断不存在对应元素时的情况
class Solution2 {
    public int[] twoSum(int[] nums, int target) {
        int[] tmp = new int[2];
        for (int i = 0; i <nums.length ; i++) {
            for (int j = i+1; j < nums.length ; j++) {
                if (nums[i] + nums[j] == target){
                    tmp[0] = i;
                    tmp[1] = j;
                    break;
                }
            }
        }
        return tmp;
    }
}

class Solution3 {

    //i和j满足i+j=target   则j=target-i
    public int[] twoSum(int[] nums, int target) {
        //定义一个哈希表存放该数组元素和对应下标
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i< nums.length; i++) {
            if(map.containsKey(target - nums[i])) {
                //将所得元素对应得下标加入到map中
                return new int[] {map.get(target-nums[i]),i};
            }
            //将数组中所有元素及其对应下标加入到哈希表中
            map.put(nums[i], i);
        }
        //到这里代表数组中不存在  抛出异常
        throw new IllegalArgumentException("No two sum solution");
    }
}
