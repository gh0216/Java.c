public class TestSort {

    /**
     * 稳定性：稳定
     * 时间复杂度：
     *          最好情况下：O(n)      数组中的数据是有序的
     *          最坏情况下：O(n^2)   数组中的数据是无序的
     * 空间复杂度：O(1)
     * 特点：越有序  越快
     * @param array
     */
    public static void insertSort(int[] array) {
        long start = System.currentTimeMillis();
        for (int i = 1; i < array.length; i++) {
            int tmp = array[i];
            int j = i-1;
            for (; j >= 0 ; j--) {
                if(array[j] > tmp) {
                    array[j+1] = array[j];
                }else {
                    //array[j+1] = tmp;
                    break;
                }
            }
            array[j+1] = tmp;
        }
        long end = System.currentTimeMillis();
        System.out.println(end-start);
    }
    //
    public static void shell(int[] array,int gap) {
        for (int i = gap; i < array.length; i=i+1) {
            int tmp = array[i];
            int j = i-gap;
            for (; j >= 0 ; j=j-gap) {
                if(array[j] > tmp) {
                    array[j+gap] = array[j];
                }else {
                    //array[j+1] = tmp;
                    break;
                }
            }
            array[j+gap] = tmp;
        }
    }

    /**
     * 稳定性：不稳定的排序
     * 时间复杂度：O(n^1.3)  -  O(n^1.5)
     * 空间复杂度：O(1)
     * @param array
     */
    public static void shellSort(int[] array) {
        int[] drr = {5,3,1};
        for (int i = 0; i < drr.length ; i++) {
            shell(array,drr[i]);
        }
    }

    /**
     * 时间复杂度：O(N^2)
     * 空间复杂度：O(1)
     * 稳定性：不稳定的排序
     * @param array
     */
    public static void selectSort(int[] array) {
        long start = System.currentTimeMillis();

        for (int i = 0; i < array.length; i++) {
            for (int j = i+1; j < array.length; j++) {
                if(array[i] > array[j]) {
                    int tmp = array[i];
                    array[i] = array[j];
                    array[j] = tmp;
                }
            }
        }
        long end = System.currentTimeMillis();
        System.out.println(end-start);
    }

    public static void adjustDown(int[] array,int parent,int len) {
        int child = 2*parent+1;
        while (child < len) {

            if(child+1 < len && array[child] < array[child+1]) {
                child++;
            }

            if(array[child] > array[parent]) {
                int tmp = array[child];
                array[child] = array[parent];
                array[parent] = tmp;
                parent = child;
                child = 2*parent+1;
            }else {
                break;
            }
        }
    }

    public static void createHeap(int[] array) {
        for (int i = (array.length-1-1)/2; i >= 0 ; i--) {
            adjustDown(array,i,array.length);
        }
    }

    /**
     * 时间复杂度：O(n*logn)
     * 空间复杂度：O(1)
     * 稳定性：不稳定的排序
     * @param array
     */
    public static void heapSort(int[] array) {
        long start = System.currentTimeMillis();
        createHeap(array);
        int end = array.length-1;
        while (end > 0) {
            int tmp = array[0];
            array[0] = array[end];
            array[end] = tmp;
            adjustDown(array,0,end);
            end--;
        }
        long endTime = System.currentTimeMillis();
        System.out.println(endTime-start);
    }
    //划分函数
    public static int partion(int[] array,int start,int end) {
        int tmp = array[start];
        while (start < end) {
            while (start < end && array[end] >= tmp) {
                end--;
            }
            if(start >= end) {
                //array[start] = tmp;
                break;
            }else {
                array[start] = array[end];
            }

            while (start < end && array[start] <= tmp) {
                start++;
            }
            if(start >= end) {
                //array[start] = tmp;
                break;
            }else {
                array[end] = array[start];
            }

        }
        array[start] = tmp;
        return start;
    }

    /**
     * 时间复杂度：O(n*logn)
     * 空间复杂度：O(logn)
     * 稳定性：不稳定的排序
     * @param array
     * @param low
     * @param high
     */
    public static void quick(int[] array,int low,int high) {
        if(low >= high) {
            return;
        }
        int par = partion(array,low,high);
        quick(array,low,par-1);
        quick(array,par+1,high);
    }

    public static void quickSort(int[] array) {
        quick(array,0,array.length-1);
    }

    public static void main1(String[] args) {
        int[] array = new int[10_0000];
        Random random = new Random();
        for (int i = 0; i < array.length; i++) {
            //array[i] = i;
            array[i] = random.nextInt(10_0000);
        }
        heapSort(array);
    }

    public static void main(String[] args) {
        int[] array = {12,5,9,34,6,8,33,56,89,0,7,4,22,55,77};
        System.out.println(Arrays.toString(array));
        quickSort(array);
        System.out.println(Arrays.toString(array));

    }
}

public class TestHeap {
    public int[] elem;
    public int usedSize;

    public TestHeap() {
        this.elem = new int[10];
    }

    public void adjustDown(int parent,int len) {
        int child = 2*parent+1;
        //1、首先你得判断是不是有左孩子
        while (child < len) {
            //是否有右孩子 如果有  child保存左右孩子最大值的下标
            if(child+1 < len && elem[child] < elem[child+1]) {
                child++;
            }
            //child当中 存储的就是最大值下标
            if(elem[child] > elem[parent]) {
                int tmp = elem[child];
                elem[child] = elem[parent];
                elem[parent] = tmp;
                parent = child;
                child = 2*parent+1;
            }else {
                break;
            }
        }
    }

    public void initHeap(int[] array) {
        for (int i = 0; i < array.length; i++) {
            this.elem[i] = array[i];
            this.usedSize++;
        }
        //建堆的时间复杂度是O(n*logn)
        for (int i = (this.usedSize-1-1)/2; i >= 0 ; i--) {
            adjustDown(i,usedSize);//调整的时间复杂度是：O(logn)
        }
        System.out.println("==========");
    }

    public void adjustUp(int child) {
        int parent = (child-1)/2;
        while (child > 0) {
            if(elem[child] > elem[parent]) {
                int tmp = elem[child];
                elem[child] = elem[parent];
                elem[parent] = tmp;
                child = parent;
                parent = (child-1)/2;
            }else{
                break;
            }
        }
    }
    public void push(int val) {
        if(isFull()) {
            this.elem =
                    Arrays.copyOf(this.elem,2*this.elem.length);
        }
        this.elem[this.usedSize] = val;
        this.usedSize++;//11
        adjustUp(this.usedSize-1);
    }

    public boolean isFull() {
        return this.usedSize == this.elem.length;
    }

    public void pop() {
        //0、判空
        if(isEmpty()) return;
        //1、交换堆顶和最后一个元素
        int tmp = this.elem[0];
        this.elem[0] = this.elem[this.usedSize-1];
        this.elem[this.usedSize-1] = tmp;
        this.usedSize--;
        //2、
        adjustDown(0,this.usedSize);
        System.out.println("============");
    }

    public boolean isEmpty() {
        return this.usedSize == 0;
    }


    public void heapSort(){
        int end = this.usedSize - 1;
        while (end > 0) {
            int tmp = this.elem[0];
            this.elem[0] = this.elem[end];
            this.elem[end] = tmp;
            adjustDown(0,end);
            end--;
        }
    }

    public void show() {
        for (int i = 0; i < this.usedSize; i++) {
            System.out.print(this.elem[i]+" ");
        }
        System.out.println();
    }
}
