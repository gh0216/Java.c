import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

class Solution1 {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (Integer val : nums) {
            if (set.contains(val)){
                return true;
            }
            set.add(val);
        }
        return false;
    }
}

class Solution {
    public int findMaxLength(int[] nums) {
        HashMap<Integer,Integer> hashMap = new HashMap<>();
        for (Integer val : nums){
            hashMap.put(val, hashMap.getOrDefault(val, 0)+1);
        }
        int[] two = new int[hashMap.size()];
        for (int i = 0; i < hashMap.size() ; i++) {
            two[i] = hashMap.getOrDefault(i,0)+1;
        }
        int min = two[0],a = 0;
        for (int i = 1; i < two.length ; i++) {
            if (two[i] <= min){
                a = two[i];
                two[i] = min;
                min = a;
            }
        }
        return 2*min;
    }

    public int findMaxLength1(int[] nums) {
        int maxlen = 0;
        for (int start = 0; start < nums.length; start++) {
            int zeroes = 0, ones = 0;
            for (int end = start; end < nums.length; end++) {
                if (nums[end] == 0) {
                    zeroes++;
                } else {
                    ones++;
                }
                if (zeroes == ones) {
                    maxlen = Math.max(maxlen, end - start + 1);
                }
            }
        }
        return maxlen;
    }
}

public class TestDemo {

    public static void main(String[] args) {
        int[] array = {0,1};
        int[] array1 = {0,1,0};
        int[] array2 = {0,1,1,0,0,1,0,1,1};
        Solution solution = new Solution();
        System.out.println(solution.findMaxLength1(array2));
        System.out.println(solution.findMaxLength(array2));
        System.out.println(solution.findMaxLength(array1));
    }

}

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

class ListNode {
      int val;
      ListNode next;
      ListNode()  { }
      public ListNode(int val) { this.val = val; }
      public ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    //遍历两个链表  看其中一个链表是否遍历完
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = null, tail = null;
        int carry = 0;        //进位值
        while (l1 != null || l2 != null) {
            int n1 = l1 != null ? l1.val : 0;
            int n2 = l2 != null ? l2.val : 0;
            int sum = n1 + n2 + carry;
            if (head == null) {
                head = tail = new ListNode(sum % 10);
            } else {
                tail.next = new ListNode(sum % 10);
                tail = tail.next;
                carry = sum / 10;
            }
            l1 = l1.next;
        }
        if (l2 != null) {
            if (l1 != null) {
                l2 = l2.next;
            }
        }
        if (carry > 0) {
            tail.next = new ListNode(carry);
        }
        return head;
    }


    //
    public ListNode addTwoNumbers2(ListNode l1, ListNode l2) {
        ListNode pre = new ListNode(0);  //傀儡节点
        ListNode cur = pre;     // 定义一个pre节点遍历链表
        int carry = 0;    //进位数值
        while(l1 != null || l2 != null) {
            int x = l1 == null ? 0 : l1.val;  //得到l1.val
            int y = l2 == null ? 0 : l2.val;  //得到l2.val
            int sum = x + y + carry;         //二者和

            carry = sum / 10;
            sum = sum % 10;
            cur.next = new ListNode(sum);    // 定义一个节点跟在傀儡节点  值为对应l1.val+l2.val

            cur = cur.next;            //开始遍历
            if(l1 != null)
                l1 = l1.next;
            if(l2 != null)
                l2 = l2.next;
        }
        if(carry == 1) {
            cur.next = new ListNode(carry);  //当l1.val+l2.val大于10  即carry大于1
                                             // 就需要定义一个新的进位节点 跟在sum后边
        }
        return pre.next;   ///返回傀儡节点的下一个节点
    }
}
class Solution1 {
    public int lengthOfLongestSubstring(String s) {
        int sum = 0,pre = 0,tmp = 0;
        HashSet<Character> hashSet = new HashSet<>();
        for (Character v:s.toCharArray()) {
            if (!hashSet.contains(v)){
                hashSet.add(v);
                sum++;
                pre = 0;
            }else {
                hashSet.clear();
                hashSet.add(v);
                sum = 0;
                pre++;
            }
            tmp = Math.max(sum, pre);
        }

        return tmp;
    }
    public int lengthOfLongestSubstring1(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>();
        for (int end = 0, start = 0; end < n; end++) {
            char alpha = s.charAt(end);
            if (map.containsKey(alpha)) {
                start = Math.max(map.get(alpha), start);
            }
            ans = Math.max(ans, end - start + 1);
            map.put(s.charAt(end), end + 1);
        }
        return ans;
    }
}

class Solution3 {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] tmp = new int[nums1.length+nums2.length];
        int i = 0,j = 0,n = 0;
        while (i < nums1.length || j < nums2.length){
            while (i < nums1.length && j < nums2.length){
                if (nums1[i] < nums2[j]){
                    tmp[n] = nums1[i];
                    i++;
                }else {
                    tmp[n] = nums2[j];
                    j++;
                }
                n++;
            }
            if (i < nums1.length){
                tmp[n] = nums1[i];
                i++;
            }
            if (j < nums2.length){
                tmp[n] = nums2[j];
                j++;
            }
            n++;
        }
        return (tmp[0] + tmp [tmp.length-1]) *1.0 /2;
    }
    public double findMedianSortedArrays1(int[] nums1, int[] nums2) {
        int[] tmp = new int[nums1.length+nums2.length];
        int i = 0,j = 0,n = 0;
        double g = 0.0;
        if (nums1 ==null || nums1.length==0)   return nums2[(nums2.length+1)/2];
        if (nums2 ==null || nums2.length==0)   return nums1[(nums1.length+1)/2];
        while (i < nums1.length || j < nums2.length){
            while (i < nums1.length && j < nums2.length){
                if (nums1[i] < nums2[j]){
                    tmp[n] = nums1[i];
                    i++;
                }else {
                    tmp[n] = nums2[j];
                    j++;
                }
                n++;
            }
            if (i < nums1.length){
                tmp[n] = nums1[i];
                i++;
            }
            if (j < nums2.length){
                tmp[n] = nums2[j];
                j++;
            }
            n++;
        }
        if (tmp.length > 1){
            if (tmp.length / 2 == 1){
                g = tmp[tmp.length/2]*1.0;
            }else {
                g = (tmp[tmp.length/2]+tmp[tmp.length/2-1])*1.0/2;
            }
        }
        return g;
    }
}
public class TestDemo {

    public static void main(String[] args) {
        int[] nums1 = {1,3}, nums2 = {3,4};
        Solution3 solution3 = new Solution3();
        //System.out.println(solution3.findMedianSortedArrays(nums1, nums2));
        System.out.println(solution3.findMedianSortedArrays1(nums1,nums2));
    }
    public static void main1(String[] args) {
        Solution1 solution1 = new Solution1();
        System.out.println(solution1.lengthOfLongestSubstring1("pwwkew"));
        System.out.println(solution1.lengthOfLongestSubstring("pwwkew"));
    }
}
