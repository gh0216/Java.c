import java.util.Arrays;

public class TestDemo {

    

    //判断一个数组是否为升序
    public static boolean shenXu (int[] array) {
        for (int i = 0; i < array.length-1 ; i++) {
            if (array[i] > array[i+1]){
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int[] array = {1,2,3,4,5,6,7};
        System.out.println(shenXu(array));
    }

    //用二分法法寻找一个数组中数据是该数组的第几个元素
    public static int binarSearch (int[] array,int key){
        int left = 0;
        int right = array.length-1;
        while (left  <= right ) {
            int mid = ( left + right )/2;
            if (array[mid] < key){
                left = mid+1;
            }else if(array[mid] > key){
                right = mid-1;
            }else {
                return mid;
            }
        }
        return -1;//  没有找到该数
    }

    public static void main13(String[] args) {
        int[] array = new int[10000];
        for (int i = 0; i < 10000 ; i++) {
            array[i] = i;
        }
        int ret = binarSearch(array,5644);
        System.out.println(ret);
    }

    //寻找一个数组中数据是该数组的第几个元素
    public static int findNumber (int[] array,int key) {
        for (int i = 0; i < array.length ; i++) {
            if (array[i] == key ){
                return i;
            }
        }
        return -1;//未找到
    }

    public static void main12(String[] args) {
        int[] array = {1,2,3,4,5,6,7,8};
        int ret= findNumber(array,3);
        System.out.println(ret);
    }

    //数组四种复制方法
    public static void main11(String[] args) {
        int[] array = {1,2,3,4,5,6};
        int[] array1 =  Arrays.copyOf(array,array.length);
        System.out.println(Arrays.toString(array1));
        int[] array2 = new int[array.length];
        for (int i = 0; i <array.length ; i++) {
            array2[i] = array[i];
        }
        System.out.println(Arrays.toString(array2));
        int[] array3 = new int[array.length];
        System.arraycopy(array,0,array3,0,array.length);
        System.out.println(Arrays.toString(array3));
        int[] array4 = array.clone();
        System.out.println(Arrays.toString(array4));
    }


    //实现一个方法 printArray, 以数组为参数, 循环访问数组中的每个元素, 打印每个元素的值.
    public static void printArray (int[] array) {
        for (int i = 0; i < array.length ; i++) {
            System.out.print(array[i]+" ");
        }
    }

    public static void main10(String[] args) {
        int[] array = {2,2,3,4,5,7};
        printArray(array);
    }



    //实现一个方法 toString, 把一个整型数组转换成字符串. 例如数组 {1, 2, 3} , 返回的字符串为 "[1, 2, 3]", 注意 逗号 的位置和数量.
    public static String toString(int[] array) {
        if(array == null) {
            return "";
        }
        if(array.length == 0) {
            return "[]";
        }
        String ret = "[ ";
        for (int i = 0; i < array.length; i++) {
            ret = ret + array[i];//[ 1,
            //当时最后一个元素的时候，不加,
            if(i != array.length-1) {
                ret += ", ";
            }
        }
        ret += " ]";
        return ret;
    }

    public static void main9(String[] args) {
        int[] array = {1,2,3};
        System.out.println(toString(array));
    }


    //实现一个方法 copyOf, 对一个整型数组进行拷贝, 得到一个新的数组
    public static void copeOf (int[] array) {
        if (array == null || array.length == 0){
            return ;
        }
        int[] copy = new int[array.length];
        for (int i = 0; i <array.length-1 ; i++) {
            copy[i] =  array[i];
        }
    }

    public static void main8(String[] args) {
        int[] array = {1,4,5,9,5,41,2,4,5,7,4,8};
        copeOf(array);
        System.out.println(Arrays.toString(array));
    }

    //偶数在前奇数在后
    public static void func(int[] array) {
        if (array == null || array.length == 0){
            return ;
        }
        int left  = 0;
        int right = array.length-1;
        while (left < right) {
            while (left < right && array[left] % 2 != 0) {
                left++;
            }
            while (left < right && array[right] % 2 == 0) {
                right--;
            }
            if (left < right ){
                int tmp = array[left];
                array[left] = array[right];
                array[right] = tmp ;
            }
        }
    }
    public static void main7(String[] args) {
        int[] array = {45,2,61,35,66,96,32,45};
        func(array);
        System.out.println(Arrays.toString(array));
    }

    //交换数组数据
    public static void sort (int[] array){
        if (array == null || array.length == 0){
            return ;
        }
        int left = 0;
        int right =array.length-1;
        while ( left < right){
            int tmp = array[left];
            array[left] = array [right];
            array[right] = tmp;
            left++;
            right--;
        }
    }
    public static void main6(String[] args) {
        int[] array = {12,6,8,9,4,5,6,1};
        sort(array);
        System.out.println(Arrays.toString(array));
    }


    //优化  判断是否已经排序好
    public static void pubSort (int[] array) {
        if (array == null || array.length == 0){
            return ;
        }
        //i是趟数
        boolean flg = false;
        for (int i = 0; i < array.length-1 ; i++) {
            flg = false;
            for (int j = 0; j < array.length-1-i ; j++) {
                if (array[j] > array[j + 1]) {
                    int a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                    flg = true;
                }
            }
            if (flg == false){
                break;
            }
        }
    }
    public static void main5(String[] args) {
//        int[] array = new int[10000];
//        for (int i = 0; i < 10000 ; i++) {
//            array[i] = i+1;
//        }
        int[] array= {1,5,3,6,9,7,8};
        maSort(array);
        System.out.println(Arrays.toString(array));
    }



    //冒泡排序
    public static void maSort (int[] array) {
        int a = 0;
        if (array == null || array.length == 0){
            return ;
        }
        //i是趟数
        for (int i = 0; i < array.length-1 ; i++) {
            for (int j = 0; j < array.length-1-i ; j++) {
                if (array[j] > array[j+1]){
                    a = array[j];
                    array[j] = array [j+1];
                    array[j+1] = a;
                }
            }
        }
    }
    public static void main4(String[] args) {
        int[] array = {8,2,4,3,9,5};
        maSort(array);
        System.out.println(Arrays.toString(array));
    }


    //给定一个整型数组, 判定数组是否有序（递增）
    public static boolean isSorted (int[] array ) {
        for (int i = 0; i < array.length-1 ; i++) {
            if (array[i] > array[i+1]) {
                return false;
            }
        }
        return true;
    }
    public static void main3(String[] args) {
        int[] array= {2,3,6,4,2,5};
        System.out.println(isSorted(array));
    }




    //二分查找
    public static int binarySearch(int[] array,int key) {
        int left = 0;
        int right = array.length-1;

        while (left <= right) {
            int mid = (left + right)/2;
            if (array[mid] < key){
                left = mid + 1;
            }else if (array[mid] > key) {
                right = mid - 1;
            }else{
                return mid;
            }
        }
        return -1;//没有找到
    }

    public static void main2(String[] args) {
        int[] array = {1,12,5,6,9,4};
        Arrays.sort(array);
        System.out.println(binarySearch(array, 4));
    }


    //找出一个数组的最大值
    public static void main1(String[] args) {
        int[] array = {1,2,3,5,8,7};
        int ret = max(array);
        System.out.println(ret);
    }
    public static int max (int[] array) {
        if (array == null ||array.length == 0 ){
            return -1;
        }
        int max = array[0];
        for (int i = 1; i < array.length ; i++) {
            max = Math.max(max, array[i]);
        }
        return max;
    }
}
