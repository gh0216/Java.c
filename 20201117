import com.sun.org.apache.xalan.internal.lib.NodeInfo;
import com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;

import java.util.*;

class Solution8{
    public int[] intersection(int[] nums1, int[] nums2) {
        int count = 0;
        ArrayList<Integer> arr = new ArrayList<>();
        HashSet<Integer> map = new HashSet<>();
        for (Integer val : nums1) {
            map.add(val);
        }
        for (Integer c : nums2) {
            if (map.contains(c) && !arr.contains(c)){
                arr.add(c);
            }
        }
        int[] tmp = new int[arr.size()];
        //遍历链表将数组的值放入到数组中
        for(int i=0; i<arr.size(); i++)
        {
            tmp[i] = arr.get(i);
        }
        return tmp;
    }
}


//思路：
//1.先对两个数组排序
//2.建立f1、f2指针，分别指向nums1数组、nums2数组的下标
//3.若nums1[f1]>nums[f2]，则指针f1移动一位；若num1[f2]>nums[f1]，则指针f2移动一位；若相等，便是找到了两个数组的交集之一，加入动态数组arrl中
//4.重复步骤3，直到其中一个数组迭代完，便退出循环
//5.将动态数组arrl赋值给静态数组tmp,并返回tmp

class Solution7{
    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int f1 = 0,f2=0;
        ArrayList<Integer> arrl = new ArrayList<>();
        //当一组数组遍历完成时结束
        while(f1<nums1.length && f2<nums2.length){
            if(nums1[f1]<nums2[f2]){
                f1++;
            }else if(nums1[f1]>nums2[f2]){
                f2++;
                //nums1[f1] == nums2[f2]
            }else{
                arrl.add(nums1[f1]); //将相等的值加入到list当中
                f1++;
                f2++;
            }
        }
        int[] tmp = new int[arrl.size()];
        //遍历链表将数组的值放入到数组中
        for(int i=0; i<arrl.size(); i++)
        {
            tmp[i] = arrl.get(i);
        }
        return tmp;
    }
    public int[] intersect2(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        //找到新的数组的长度等于两个比较数组的最小长度
        int len = Math.min(nums1.length, nums2.length);
        int[] tmp = new int[len];
        int f1 = 0 ,f2 = 0 , k = 0;
        //当一组数组遍历完成时结束
        while(f1 < nums1.length && f2 < nums2.length){
            if(nums1[f1]<nums2[f2]){
                f1++;
            }else if(nums1[f1]>nums2[f2]){
                f2++;
            //nums1[f1] == nums2[f2]
            }else{
                tmp[k] = nums1[f1]; //将相等的值加入到数组tmp当中
                f1++;
                f2++;
                k++;
            }
        }
        return tmp;
    }
}

//宝石的判定
class Solution6{
    public int jewelNumber (String s,String t){
        int count = 0;
        HashSet<Character> map = new HashSet<>();
        for (Character val : s.toCharArray()) {
            map.add(val);
        }
        for (Character b : t.toCharArray()) {
            if (map.contains(b)){
                count++;
            }
        }
        return count;
    }
}

//同构字符串的判断
class Solution5 {
    public boolean isIsomorphic(String s, String t) {
        char[] ch1 = s.toCharArray();
        char[] ch2 = t.toCharArray();
        if (ch1.length != ch2.length){
            return false;
        }

        //遍历两个字符串  判断第一个字符串中的第i个字符的位置与
        // 第二个字符串中的第i个字符的位置是否一致
        for (int i = 0; i < ch1.length; i++) {
            if(s.indexOf(ch1[i]) != t.indexOf(ch2[i])){
                return false;
            }
        }
        return true;
    }
}


class Solution4 {
    public boolean isIsomorphic(String s, String t) {
        Map<Character, Character> hashmap = new HashMap();
        Map<Character, Character> hashmap2 = new HashMap();

        Character c;
        for(int i = 0; i < s.length(); ++i)
        {
            Character cs = s.charAt(i);
            Character ct = t.charAt(i);
            if(hashmap.containsKey(cs))
            {
                if(hashmap.get(cs) != ct)
                    return false;
            }
            else
                hashmap.put(cs,ct);

            if(hashmap2.containsKey(ct))
            {
                if(hashmap2.get(ct) != cs)
                    return false;
            }
            else
                hashmap2.put(ct,cs);


        }
        // hashmap.clear();
        return true;
    }
}


//复杂链表的复制
class Solution3{
    class Node {
        public int data;
        public Node next;
        public Node random;

        public Node(int data){
            this.data = data;
        }
    }
    public Node copyRandomNode(Node head){
        Node cur = head;
        HashMap<Node,Node> map =new HashMap<>();  //map做映射
        while (cur != null){
            Node node = new Node(cur.data);
            map.put(cur,node); // 遍历映射关系
            cur = cur.next;
        }
        //cur == null ; - 》链表遍历完成  新老节点的关系已经存在
        cur = head;
        while (cur != null){
            map.get(cur).next = map.get(cur.next);
            map.get(cur).random = map.get(cur.random);
            cur  = cur.next;
        }
        return map.get(head);
    }
}


//找到出现一次的数字
class Solution2 {
    public int singleNumber(int[] nums) {
        int ret = 0;
        for (int i:nums) {
            ret ^= i;  //异或
        }
        return ret;
    }
}
class Solution1 {
    public int singleNumber(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for (int i : nums) {
            if (set.contains(i)) {
                set.remove(i);
            } else {
                set.add(i);
            }
        }
        for (int i : nums) {
            if (set.contains(i)){
                return i;
            }
        }
        return -1;
    }
}

public class TestDemo1 {

    public static void main(String[] args) {
        Solution8 solution8 = new Solution8();
        int[] array = {4,9,5};
        int[] array1 = {9,4,9,8,4};
        System.out.println(Arrays.toString
                (solution8.intersection(array, array1)));
    }

    public static void main9(String[] args) {
        Solution7 solution7 =new Solution7();
        int[] array = {2,6,1,3,6};
        int[] array1 = {6,1,3};
        System.out.println(Arrays.toString
                (solution7.intersect(array, array1)));
        System.out.println("=================");
        System.out.println(Arrays.toString
                (solution7.intersect2(array, array1)));
    }

    public static void main8(String[] args) {
        Solution6 solution6 = new Solution6();
        System.out.println(solution6.jewelNumber("Aa", "asbajfkabiAAba"));
    }

    public static void main7(String[] args) {
        Solution5 solution = new Solution5();
        System.out.println(solution.isIsomorphic("egg", "add"));
        System.out.println(solution.isIsomorphic("egg", "fsn"));
        System.out.println(solution.isIsomorphic("egg", "fsnd"));

//        Character c;
//        String s = "avfhjah";
//        System.out.println(s.indexOf('h'));
    }

    public static void main6(String[] args) {
        Random random = new Random();
        int[] array = new int[100];
        for (int i = 0; i <100; i++) {
           array[i] = random.nextInt(100);
        }
        Solution2 ret = new Solution2();
        ret.singleNumber(array);
        System.out.println(Arrays.toString(array));
    }

    public static void main5(String[] args) {
        HashMap<Integer,Integer> map = new HashMap<>();
        ArrayList<Integer> list = new ArrayList<>();
        Random random = new Random();
        for (int i = 0 ; i <10_0000 ; i++) {
            int r = random.nextInt(100000);
            list.add(r);
        }
        //1.遍历list

        for (Integer val:list) {
            if (map.get(val) == null){
                map.put(val,1);
            }else {
                int tmp = map.get(val);
                map.put(val,tmp+1);   //当第二次遇到该数时  次数+1
            }
        }
        for (Map.Entry<Integer,Integer> entry: map.entrySet()) {
            if (entry.getValue() > 1){
                System.out.println("重复的数字："
                        +entry.getKey()+"次数"+entry.getValue());
            }
        }
    }

    public static void main4(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i <10_0000 ; i++) {
            int r = random.nextInt(100000);
            list.add(r);
        }
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < 10_0000; i++) {
            set.add(list.get(i));
        }
        System.out.println(set);
    }

    public static void main3(String[] args) {
        Random random = new Random();
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = 0; i <10_0000 ; i++) {
            int r = random.nextInt(100000);
            list.add(r);
        }
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < 10_0000; i++) {
            if (set.contains(list.get(i))){
                System.out.println(list.get(i));
                return;
            }else {
                set.add(list.get(i));
            }
        }
    }

    public static void main2(String[] args) {
        Set<String> set = new HashSet<>();
        set.add("dsaghk");
        set.add("abcd");
        set.add("abcd");

        //Set中不能存放重复的值
        System.out.println(set);

        //迭代器 ： 遍历集合
        Iterator<String> tmp =set.iterator();

        while (tmp.hasNext()){
            System.out.println(tmp.next());
        }

        System.out.println(set.size());
        tmp.remove();
        System.out.println(set.size());
    }

    public static void main1(String[] args) {
        Map<String,String> map = new HashMap<>();
        map.put("齐天大圣","孙悟空");
        System.out.println(map.get("齐天大圣"));

        for (Map.Entry<String,String> entry: map.entrySet()) {
            System.out.println(entry.getKey());
            System.out.println(entry.getValue());
        }
    }
}


class BinarySearchTree1{
    private static Node root;

    static class Node{
        public int data;
        public Node left;
        public Node right;

        public Node(int data){
            this.data = data;
        }
    }
    public void put(int key){
        Node node = new Node(key);
        if(root == null) {
            root = node;
            return;
        }
        Node parent = null;
        Node cur = root;
        while (cur != null) {
            if(cur.data < key) {
                parent = cur;
                cur = cur.right;
            }else if(cur.data > key) {
                parent = cur;
                cur = cur.left;
            }else {
                cur.data = key;
                return;
            }
        }
        //cur == null  parent = cur的父亲

        //parent 并没有到达最后空节点的父亲节点
        if(parent.data < key) {
            parent.right = node;
        }else {
            parent.left = node;
        }
    }
    public void inorder (Node root){
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
    }
    public void preorder(Node root){
        if (root == null) return;
        System.out.print(root.data + " ");
        inorder(root.left);
        inorder(root.right);
    }


    static boolean remove(int key) {
        Node cur = root;
        Node parent = null;
        while (cur != null) {
            if (root.data == key) {
                removeNode(parent, cur);
                return true;
            } else if (cur.data < key) {
                parent = cur;
                cur = cur.right;
            } else {
                parent = cur;
                cur = cur.left;
            }
        }
        return false;
    }

    //cur  :  删除节点
    //parent : 删除节点的父亲节点
    static void removeNode(Node parent,Node cur){
        if (cur.left == null){
            if (cur == root){
                root = cur.right;
            }else if (parent.left == cur){
                parent.left = cur.right;
            }else {
                parent.right = cur.right;
            }
        }else if (cur.right == null){
            if (cur == root){
                root = cur.left;
            }else if (cur == parent.left){
                parent.left = cur.left;
            }else {
                parent.right = cur.left;
            }


            //替换法  ： 1.左树找最大值
            //          2.右树找最小值
        }else {
            Node targetParent =  cur;
            Node target = targetParent.right;
            while (target.left != null){
                targetParent = target;
                target = target.left;

            }
            cur.data = target.data;


            //判断target  和   targetParent  的位置关系

            if (target == targetParent.left){
                targetParent.left = target.right;
            }else {
                targetParent.right = target.right;
            }
//            if (target.right != null){
//                targetParent.right  = target.right;
//            }else {
//                //targetParent.left = null;
//                targetParent.right = null;
//            }
        }
    }

}
